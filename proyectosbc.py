# -*- coding: utf-8 -*-
"""ProyectoSBC.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1j28qszULaULp2A80GJ5S5OzMTCw0RMwG

# **Proyecto SBC**
**Nombre:**
Edison Renato Gaibor Conde
"""

!pip install rdflib

from rdflib import URIRef, BNode, Literal, Namespace
from rdflib.namespace import FOAF, DCTERMS, XSD, RDF, SDO

mona_lisa = URIRef('http://www.wikidata.org/entity/Q12418')
davinci = URIRef('http://dbpedia.org/resource/Leonardo_da_Vinci')
lajoconde = URIRef('http://data.europeana.eu/item/04802/243FA8618938F4117025F17A8B813C5F9AA4D619')
jesus = URIRef('https://dbpedia.org/page/Jesus')
maria = URIRef('https://dbpedia.org/page/Maria')
apostoles = URIRef('https://dbpedia.org/page/Apostles_in_the_New_Testament')

EX = Namespace('http://example.org/')
edison = EX['edison']
maria = EX['maria']

birth_date = Literal("1990-07-04", datatype=XSD['date'])
title = Literal('Mona Lisa', lang='en')

title

from rdflib import Graph
g = Graph()

# Vincular prefijo a namespaces
g.bind('ex', EX)
g.bind('foaf', FOAF)
g.bind('schema', SDO)
g.bind('dcterms', DCTERMS)

g.add((edison, RDF.type, FOAF.Person))
g.add((edison, FOAF.knows, maria))
g.add((edison, FOAF['topic_interest'], mona_lisa))
g.add((edison, SDO['birthDate'], birth_date))
g.add((mona_lisa, DCTERMS['creator'], davinci))
g.add((mona_lisa, DCTERMS['title'], title))
g.add((lajoconde, DCTERMS['subject'], mona_lisa))

# Vincular prefijo a namespaces
g.bind('ex', EX)
g.bind('foaf', FOAF)
g.bind('schema', SDO)
g.bind('dcterms', DCTERMS)

for prefix, ns in g.namespaces():
    print(prefix, ns)

g.set((edison, SDO['birthDate'], Literal('1990-01-01', datatype=XSD.date)))
g.set((mona_lisa, DCTERMS['title'], Literal('La Joconde', lang='fr')))

g.remove((mona_lisa, None, None))

print(g.serialize(format='ttl'))

# Commented out IPython magic to ensure Python compatibility.
# %%capture
# !pip3 install rdflib sparqlwrapper pydotplus graphviz

import rdflib
from rdflib import Graph
from rdflib.namespace import DC, RDF, FOAF, RDFS
from rdflib import URIRef, BNode, Literal
import networkx as nx
import io
import pydotplus
from IPython.display import display, Image
from rdflib.tools.rdf2dot import rdf2dot

# Funcion para visualizar el grafo
def visualize(g):
    stream = io.StringIO()
    rdf2dot(g, stream, opts = {display})
    dg = pydotplus.graph_from_dot_data(stream.getvalue())
    png = dg.create_png()
    display(Image(png))

# Grafo usando sintaxis N3
g = Graph()

n3data = """\
@prefix : <http://www.laeuropeana.com/ns/demo#> .
:LaGioconda :hasPaint :Davinci ;
      :type    :paint .
:Davinci :hasPaint :LaUltimaCena ;
      :type    :paint .
:Jesús :AppearIn :LaUltimaCena .     
:Jesús :isMasterOf :12Apostles .
:12Apostles :AppearIn :LaUltimaCena.
:LaBiblia  :isWritenBy  :12Apostles .
:Jesús :hasParent :José;
      :gender    :male .
:José  :hasSon    :Jesús.
:Jesús :birthPlace :Nazaret.
:Nazaret :isA :City.
:Israel :isA :Country.
:Israel :isCountryOf :Nazaret.
:Jesús :birthDate :December25 .
:Pablo :isPartOf :12Apostles .
:Juan :isPartOf :12Apostles .
:Jacobo :isPartOf :12Apostles .
:Mateo :isPartOf :12Apostles .
:Natanael :isPartOf :12Apostles .
:Andres :isPartOf :12Apostles ."""
g.parse(data=n3data, format="n3")

#Imprime todas las tripletas generadas
for s, p, o in g:
   print((s, p, o))

visualize(g)

type(g)